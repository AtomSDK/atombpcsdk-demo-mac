// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
@import RealmSwift;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AtomBPC",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AtomConfiguration;
@class AtomCountry;
@class AtomException;
@class AtomProtocol;
@class AtomGroups;
@class AtomPackages;
@class AtomCity;
@class AtomChannel;

SWIFT_CLASS("_TtC7AtomBPC14AtomBPCManager")
@interface AtomBPCManager : NSObject
/// Initializes a new instance of the ATOM BPC SDK using a atomConfiguration. If previously initialized, the same object is returned.
/// \param atomConfiguration AtomConfiguration provided at the time of subscription
///
+ (AtomBPCManager * _Nullable)sharedInstanceWithAtomConfiguration:(AtomConfiguration * _Nonnull)atomConfiguration SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Gets available countries
- (void)getCountriesWithResponse:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on protocol slug
/// \param protocol AtomProtocol object
///
- (void)getCountriesByProtocolWithProtocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on countryIsoCode
/// \param country AtomCountry object
///
- (void)getCountryWithCountry:(AtomCountry * _Nonnull)country response:(void (^ _Nonnull)(AtomCountry * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on groupId
/// \param group AtomGroups object
///
- (void)getCountriesByGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on packageId
/// \param package AtomPackages object
///
- (void)getCountriesByPackageWithPackage:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on packageId and Protocol slug
/// \param package AtomPackages object
///
/// \param protocol AtomProtocol object
///
- (void)getCountriesByPackageAndProtocolWithPackage:(AtomPackages * _Nonnull)package protocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available countries based on packageId and groupId
/// \param package AtomPackages object
///
/// \param group AtomGroups object
///
- (void)getCountriesByPackageAndGroupWithPackage:(AtomPackages * _Nonnull)package group:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomCountry *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities
- (void)getCitiesWithResponse:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on cityId
/// \param city AtomCity object
///
- (void)getCityWithCity:(AtomCity * _Nonnull)city response:(void (^ _Nonnull)(AtomCity * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on protocol slug
/// \param protocol AtomProtocol object
///
- (void)getCitiesByProtocolWithProtocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on country slug
/// \param country AtomCountry object
///
- (void)getCitiesByCountryWithCountry:(AtomCountry * _Nonnull)country response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on group Id
/// \param group AtomGroups object
///
- (void)getCitiesByGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on package Id
/// \param package AtomPackages object
///
- (void)getCitiesByPackageWithPackage:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on package Id and protocol slug
/// \param protocol AtomProtocol object
///
/// \param package AtomPackages object
///
- (void)getCitiesByPackageAndProtocolWithProtocol:(AtomProtocol * _Nonnull)protocol package:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Cities based on package Id and group Id
/// \param group AtomGroups object
///
/// \param package AtomPackages object
///
- (void)getCitiesByPackageAndGroupWithGroup:(AtomGroups * _Nonnull)group package:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomCity *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels
- (void)getChannelsWithResponse:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on channel Id
/// \param channel AtomChannel object
///
- (void)getChannelWithChannel:(AtomChannel * _Nonnull)channel response:(void (^ _Nonnull)(AtomChannel * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on protocol slug
/// \param protocol AtomProtocol object
///
- (void)getChannelsByProtocolWithProtocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on package Id
/// \param package AtomPackages object
///
- (void)getChannelsByPackageWithPackage:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on package Id and group Id
/// \param package AtomPackages object
///
/// \param group AtomGroups object
///
- (void)getChannelsByPackageAndGroupWithPackage:(AtomPackages * _Nonnull)package group:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on  group Id
/// \param group AtomGroups object
///
- (void)getChannelsByGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Channels based on  package Id and protocol slug
/// \param package AtomPackages object
///
/// \param protocol AtomProtocol object
///
- (void)getChannelsByPackageAndProtocolsWithPackage:(AtomPackages * _Nonnull)package protocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(NSArray<AtomChannel *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Groups
- (void)getGroupsWithResponse:(void (^ _Nonnull)(NSArray<AtomGroups *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Group by group Id
/// \param group AtomGroups object
///
- (void)getGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(AtomGroups * _Nullable, AtomException * _Nullable))response;
/// Gets available Packages
- (void)getPackagesWithResponse:(void (^ _Nonnull)(NSArray<AtomPackages *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Packages by package Id
/// \param package AtomPackages object
///
- (void)getPackageWithPackage:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(AtomPackages * _Nullable, AtomException * _Nullable))response;
/// Gets available Packages by group Id
/// \param group AtomGroups object
///
- (void)getPackageByGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomPackages *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Protocols
- (void)getProtocolsWithResponse:(void (^ _Nonnull)(NSArray<AtomProtocol *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Protocol by protocol slug
/// \param protocol AtomProtocol object
///
- (void)getProtocolWithProtocol:(AtomProtocol * _Nonnull)protocol response:(void (^ _Nonnull)(AtomProtocol * _Nullable, AtomException * _Nullable))response;
/// Gets available Protocol by package Id
/// \param package AtomPackages object
///
- (void)getProtocolsByPackageWithPackage:(AtomPackages * _Nonnull)package response:(void (^ _Nonnull)(NSArray<AtomProtocol *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Protocol by group Id
/// \param group AtomGroups object
///
- (void)getProtocolsByGroupWithGroup:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomProtocol *> * _Nullable, AtomException * _Nullable))response;
/// Gets available Protocol by package Id and group Id
/// \param package AtomPackages object
///
/// \param group AtomGroups object
///
- (void)getProtocolsByPackageAndGroupWithPackage:(AtomPackages * _Nonnull)package group:(AtomGroups * _Nonnull)group response:(void (^ _Nonnull)(NSArray<AtomProtocol *> * _Nullable, AtomException * _Nullable))response;
@end


SWIFT_CLASS("_TtC7AtomBPC13BaseException")
@interface BaseException : NSObject
@property (nonatomic) NSInteger errorCode;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
@property (nonatomic, copy) NSString * _Nullable errorDomain;
@property (nonatomic, strong) NSObject * _Nullable innerException;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorDomain:(NSString * _Nonnull)errorDomain exception:(NSObject * _Nullable)exception OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMsg:(NSString * _Nonnull)errorMsg errorDomain:(NSString * _Nonnull)errorDomain exception:(NSObject * _Nullable)exception OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AtomBPC13AtomException")
@interface AtomException : BaseException
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorDomain:(NSString * _Nonnull)errorDomain exception:(NSObject * _Nullable)exception OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMsg:(NSString * _Nonnull)errorMsg errorDomain:(NSString * _Nonnull)errorDomain exception:(NSObject * _Nullable)exception SWIFT_UNAVAILABLE;
@end


@class RLMRealm;
@class RLMObjectSchema;
@class RLMSchema;

SWIFT_CLASS("_TtC7AtomBPC19BaseRepositoryModel")
@interface BaseRepositoryModel : RealmSwiftObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
